Generic about components and passing props
actual value is put where the return is final
so if I import a component, ie button, header- I put props where the component is 
created; but the value of the prop, where it is imported for returning

Events
#2- uppercase function names
-for easiness, put function to a component where it is imported?

#3 side effects
https://dev.to/francodalessio/understanding-react-s-useeffect-hook-lbg
The useEffect Hook
Plain and simple, useEffect lets you perform side effects in function components.

Qn 
Good at just rendering out information to display, 
Downside- to change something in context, all the components that use the context, when we update the code in our useContext, all
the components that use this context re-render.
Source:
    React State Management Tutorial | Context Api | React Tutorial For Beginners
    https://www.youtube.com/watch?v=35lXWvCuM8o

    ===
    Lifting State into Global / App state. 
    This becomes our app component state
    Here it will be at the top level to enable using within other components, or will have to send it updatebefor using in in
    other components. It gets messy 
    If we were using ContextAPI or Redux, it would be in Context, not App where (I/We did put it)

    ===
    here above, we moved component, it's final import in taskS, it turned it's prop to state-value which is being 
    fetched from global state.
    when we get in app, we just maintain propName from import and pass value as would display on screen as specified in destination file:
    i.e- with Tasks component import in App
    it maintained its prop name for varied details (tasksListedProp)
    just as task component maintained taskProp prop from it's import own file
    the value is what's fed from the importING destination file even to the very final App holding global state